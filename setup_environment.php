<?php
/**
 * Script de configuration de l'environnement
 * √Ä ex√©cuter une seule fois lors de l'installation
 */

echo "üîß Configuration de l'environnement - Syst√®me de Biblioth√®que\n";
echo "============================================================\n\n";

// V√©rifier les pr√©requis
echo "üìã V√©rification des pr√©requis...\n";

$requirements = [
    'PHP Version >= 7.4' => version_compare(PHP_VERSION, '7.4.0', '>='),
    'PDO Extension' => extension_loaded('pdo'),
    'PDO MySQL Extension' => extension_loaded('pdo_mysql'),
    'OpenSSL Extension' => extension_loaded('openssl'),
    'JSON Extension' => extension_loaded('json'),
    'Fileinfo Extension' => extension_loaded('fileinfo'),
    'Session Support' => function_exists('session_start'),
];

$allRequirementsMet = true;
foreach ($requirements as $requirement => $met) {
    $status = $met ? '‚úÖ' : '‚ùå';
    echo "  $status $requirement\n";
    if (!$met) $allRequirementsMet = false;
}

if (!$allRequirementsMet) {
    echo "\n‚ùå Certains pr√©requis ne sont pas satisfaits. Veuillez les installer avant de continuer.\n";
    exit(1);
}

echo "\n‚úÖ Tous les pr√©requis sont satisfaits!\n\n";

// Cr√©er les dossiers n√©cessaires
echo "üìÅ Cr√©ation des dossiers...\n";

$directories = [
    'logs',
    'uploads',
    'uploads/books',
    'uploads/magazines',
    'uploads/newspapers',
    'uploads/documents',
    'temp'
];

foreach ($directories as $dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0700, true)) {
            echo "  ‚úÖ Cr√©√©: $dir\n";
        } else {
            echo "  ‚ùå Erreur lors de la cr√©ation de: $dir\n";
        }
    } else {
        echo "  ‚ÑπÔ∏è  Existe d√©j√†: $dir\n";
    }
}

// Cr√©er le fichier .env s'il n'existe pas
echo "\nüîê Configuration de l'environnement...\n";

if (!file_exists('.env')) {
    $envContent = <<<ENV
# Configuration de l'environnement - Syst√®me de Biblioth√®que
# Modifiez ces valeurs selon votre configuration

# Environnement (development/production)
APP_ENV=development
APP_DEBUG=true

# Base de donn√©es
DB_HOST=localhost
DB_NAME=library_db
DB_USER=root
DB_PASS=

# S√©curit√©
SESSION_SECRET=change_this_to_a_secure_random_string
CSRF_SECRET=change_this_to_another_secure_random_string

# Configuration des logs
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# Configuration des uploads
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf,text/plain

# Configuration des sessions
SESSION_LIFETIME=3600
SESSION_REFRESH_TIME=1800

ENV;

    if (file_put_contents('.env', $envContent)) {
        echo "  ‚úÖ Fichier .env cr√©√©\n";
        echo "  ‚ö†Ô∏è  IMPORTANT: Modifiez les valeurs dans le fichier .env avant de continuer!\n";
    } else {
        echo "  ‚ùå Erreur lors de la cr√©ation du fichier .env\n";
    }
} else {
    echo "  ‚ÑπÔ∏è  Fichier .env existe d√©j√†\n";
}

// Cr√©er le fichier .htaccess pour la protection
echo "\nüõ°Ô∏è  Configuration de la s√©curit√©...\n";

if (!file_exists('.htaccess')) {
    $htaccessContent = <<<HTACCESS
# Protection du dossier racine
# Emp√™cher l'acc√®s direct aux fichiers PHP en dehors de public/

# Bloquer l'acc√®s √† tous les fichiers PHP
<Files "*.php">
    Order Deny,Allow
    Deny from all
</Files>

# Autoriser seulement index.php dans public/
<Files "public/index.php">
    Order Allow,Deny
    Allow from all
</Files>

# Bloquer l'acc√®s aux fichiers sensibles
<FilesMatch "\.(env|config|sql|log|md|txt)$">
    Order Deny,Allow
    Deny from all
</FilesMatch>

# Bloquer l'acc√®s aux dossiers sensibles
<DirectoryMatch "^/(config|includes|modules|lang|logs)/">
    Order Deny,Allow
    Deny from all
</DirectoryMatch>

# Protection contre l'√©num√©ration de r√©pertoires
Options -Indexes

# Headers de s√©curit√©
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Permissions-Policy "geolocation=(), microphone=(), camera=()"
</IfModule>

# Protection contre les attaques par injection
<IfModule mod_rewrite.c>
    RewriteEngine On
    
    # Bloquer les tentatives d'acc√®s aux fichiers de configuration
    RewriteRule ^(config|includes|modules|lang)/ - [F,L]
    
    # Bloquer les tentatives d'acc√®s aux fichiers de sauvegarde
    RewriteRule \.(bak|backup|old|tmp|temp)$ - [F,L]
    
    # Bloquer les tentatives d'acc√®s aux fichiers de base de donn√©es
    RewriteRule \.(sql|db|sqlite)$ - [F,L]
</IfModule>

HTACCESS;

    if (file_put_contents('.htaccess', $htaccessContent)) {
        echo "  ‚úÖ Fichier .htaccess cr√©√©\n";
    } else {
        echo "  ‚ùå Erreur lors de la cr√©ation du fichier .htaccess\n";
    }
} else {
    echo "  ‚ÑπÔ∏è  Fichier .htaccess existe d√©j√†\n";
}

// V√©rifier la connectivit√© √† la base de donn√©es
echo "\nüóÑÔ∏è  Test de connexion √† la base de donn√©es...\n";

try {
    // Charger la configuration temporaire
    $config = [
        'host' => 'localhost',
        'dbname' => 'library_db',
        'username' => 'root',
        'password' => '',
    ];
    
    $dsn = "mysql:host={$config['host']};charset=utf8mb4";
    $pdo = new PDO($dsn, $config['username'], $config['password']);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    echo "  ‚úÖ Connexion MySQL r√©ussie\n";
    
    // V√©rifier si la base de donn√©es existe
    $stmt = $pdo->query("SHOW DATABASES LIKE '{$config['dbname']}'");
    if ($stmt->rowCount() > 0) {
        echo "  ‚úÖ Base de donn√©es '{$config['dbname']}' existe\n";
    } else {
        echo "  ‚ö†Ô∏è  Base de donn√©es '{$config['dbname']}' n'existe pas\n";
        echo "     Cr√©ez-la manuellement ou ex√©cutez le script de cr√©ation de base de donn√©es\n";
    }
    
} catch (PDOException $e) {
    echo "  ‚ùå Erreur de connexion MySQL: " . $e->getMessage() . "\n";
    echo "     V√©rifiez vos param√®tres de base de donn√©es dans le fichier .env\n";
}

// V√©rifier les permissions des fichiers
echo "\nüîí V√©rification des permissions...\n";

$filesToCheck = [
    '.env' => '600',
    '.htaccess' => '644',
    'config/' => '755',
    'includes/' => '755',
    'logs/' => '700',
    'uploads/' => '700'
];

foreach ($filesToCheck as $file => $permission) {
    if (file_exists($file)) {
        $currentPerms = substr(sprintf('%o', fileperms($file)), -3);
        if ($currentPerms === $permission) {
            echo "  ‚úÖ $file: $currentPerms\n";
        } else {
            echo "  ‚ö†Ô∏è  $file: $currentPerms (recommand√©: $permission)\n";
        }
    }
}

// G√©n√©rer des cl√©s de s√©curit√©
echo "\nüîë G√©n√©ration des cl√©s de s√©curit√©...\n";

$sessionSecret = bin2hex(random_bytes(32));
$csrfSecret = bin2hex(random_bytes(32));

echo "  Session Secret: $sessionSecret\n";
echo "  CSRF Secret: $csrfSecret\n";
echo "  ‚ö†Ô∏è  Copiez ces cl√©s dans votre fichier .env\n";

// Instructions finales
echo "\nüéâ Configuration termin√©e!\n";
echo "============================================================\n\n";

echo "üìã Prochaines √©tapes:\n";
echo "1. Modifiez le fichier .env avec vos param√®tres de base de donn√©es\n";
echo "2. Cr√©ez la base de donn√©es si elle n'existe pas\n";
echo "3. Ex√©cutez les scripts de cr√©ation des tables\n";
echo "4. Configurez votre serveur web pour pointer vers le dossier public/\n";
echo "5. Testez l'application en acc√©dant √† l'URL de votre serveur\n\n";

echo "üîí Recommandations de s√©curit√©:\n";
echo "- Changez les mots de passe par d√©faut\n";
echo "- Activez HTTPS en production\n";
echo "- Configurez des sauvegardes r√©guli√®res\n";
echo "- Surveillez les logs d'erreur\n";
echo "- Maintenez PHP et les d√©pendances √† jour\n\n";

echo "üìö Documentation: Consultez SECURITY_GUIDE.md pour plus d'informations\n";
echo "üêõ Support: En cas de probl√®me, v√©rifiez les logs dans le dossier logs/\n\n";

echo "‚úÖ Installation termin√©e avec succ√®s!\n";
?> 